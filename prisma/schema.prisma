datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum Status {
  PENDING
  ACCEPTED
  DECLINED
}

enum DugStatus {
  ACTIVE
  CANCELLED
  SUSPENDED
  COMPLETED
}

model User {
  id               String           @id @default(cuid())
  name             String?
  email            String?          @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  accounts         Account[]
  reviews          Review[]
  participations   Participation[]
  dugnads          Dugnad[]         @relation("UserDugnad")
  following        User[]           @relation("UserFollows")
  followers        User[]           @relation("UserFollows")
  sentMessages     DirectMessage[]  @relation("sentMessages")
  receivedMessages DirectMessage[]  @relation("receivedMessages")
  conversations    Conversation[] 
  threadsMsg       ThreadMessages[]
  dugMessages      DugMessages[]
  createdAt        DateTime         @default(now())
}

model DugMessages {
  id       Int      @id @default(autoincrement())
  message  String
  ownerId  String
  dugnadId Int
  postedAt DateTime @default(now())

  owner  User   @relation(fields: [ownerId], references: [id])
  dugnad Dugnad @relation(fields: [dugnadId], references: [id], onDelete: Cascade)
}

model Conversation {
  id       Int             @id @default(autoincrement())
  users    User[]
  messages DirectMessage[]
}

model DirectMessage {
  id             Int      @id @default(autoincrement())
  content        String
  senderId       String
  receiverId     String
  conversationId Int
  sentAt         DateTime @default(now())

  sender         User         @relation("sentMessages", fields: [senderId], references: [id])
  receiver       User         @relation("receivedMessages", fields: [receiverId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Dugnad {
  id           Int             @id @default(autoincrement())
  ownerId      String
  image        String?
  title        String
  date         DateTime
  info         String
  createdAt    DateTime        @default(now())
  status       DugStatus
  participants Participation[]
  categories   Category[]
  reviews      Review[]
  dugMessages  DugMessages[]
  dugThreads   Thread[]
  locationId   Int             @unique

  location Location @relation(fields: [locationId], references: [id])
  owner    User     @relation(fields: [ownerId], references: [id], name: "UserDugnad")
}

model Thread {
  id         Int              @id @default(autoincrement())
  title      String
  desc       String
  dugnadId   Int
  threadMsgs ThreadMessages[]

  dugnad Dugnad @relation(fields: [dugnadId], references: [id])
}

model ThreadMessages {
  id       Int    @id @default(autoincrement())
  text     String
  userId   String
  threadId Int

  user   User   @relation(fields: [userId], references: [id])
  thread Thread @relation(fields: [threadId], references: [id])
}

model Participation {
  id       Int    @id @default(autoincrement())
  userId   String
  dugnadId Int
  status   Status

  user   User   @relation(fields: [userId], references: [id])
  dugnad Dugnad @relation(fields: [dugnadId], references: [id], onDelete: Cascade)

  @@unique([userId, dugnadId])
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  dugnads Dugnad[]
}

model Location {
  id        Int     @id @default(autoincrement())
  address   String
  latitude  Float
  longitude Float
  dugnad    Dugnad?
}

model Review {
  id       Int    @id @default(autoincrement())
  writerId String
  dugnadId Int
  title    String
  text     String
  rating   Int

  writer User   @relation(fields: [writerId], references: id)
  dugnad Dugnad @relation(fields: [dugnadId], references: id)

  @@unique([writerId, dugnadId])
}
